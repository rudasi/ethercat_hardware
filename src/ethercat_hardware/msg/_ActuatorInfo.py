"""autogenerated by genpy from ethercat_hardware/ActuatorInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ActuatorInfo(genpy.Message):
  _md5sum = "40f44d8ec4380adc0b63713486eecb09"
  _type = "ethercat_hardware/ActuatorInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint32 id
string name
string robot_name
string motor_make
string motor_model
float64 max_current
float64 speed_constant
float64 motor_resistance
float64 motor_torque_constant
float64 encoder_reduction
float64 pulses_per_revolution
"""
  __slots__ = ['id','name','robot_name','motor_make','motor_model','max_current','speed_constant','motor_resistance','motor_torque_constant','encoder_reduction','pulses_per_revolution']
  _slot_types = ['uint32','string','string','string','string','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,name,robot_name,motor_make,motor_model,max_current,speed_constant,motor_resistance,motor_torque_constant,encoder_reduction,pulses_per_revolution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ActuatorInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.name is None:
        self.name = ''
      if self.robot_name is None:
        self.robot_name = ''
      if self.motor_make is None:
        self.motor_make = ''
      if self.motor_model is None:
        self.motor_model = ''
      if self.max_current is None:
        self.max_current = 0.
      if self.speed_constant is None:
        self.speed_constant = 0.
      if self.motor_resistance is None:
        self.motor_resistance = 0.
      if self.motor_torque_constant is None:
        self.motor_torque_constant = 0.
      if self.encoder_reduction is None:
        self.encoder_reduction = 0.
      if self.pulses_per_revolution is None:
        self.pulses_per_revolution = 0.
    else:
      self.id = 0
      self.name = ''
      self.robot_name = ''
      self.motor_make = ''
      self.motor_model = ''
      self.max_current = 0.
      self.speed_constant = 0.
      self.motor_resistance = 0.
      self.motor_torque_constant = 0.
      self.encoder_reduction = 0.
      self.pulses_per_revolution = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_I.pack(self.id))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motor_make
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motor_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.max_current, _x.speed_constant, _x.motor_resistance, _x.motor_torque_constant, _x.encoder_reduction, _x.pulses_per_revolution))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_make = str[start:end].decode('utf-8')
      else:
        self.motor_make = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_model = str[start:end].decode('utf-8')
      else:
        self.motor_model = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.max_current, _x.speed_constant, _x.motor_resistance, _x.motor_torque_constant, _x.encoder_reduction, _x.pulses_per_revolution,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_I.pack(self.id))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.robot_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motor_make
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.motor_model
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.max_current, _x.speed_constant, _x.motor_resistance, _x.motor_torque_constant, _x.encoder_reduction, _x.pulses_per_revolution))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (self.id,) = _struct_I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_name = str[start:end].decode('utf-8')
      else:
        self.robot_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_make = str[start:end].decode('utf-8')
      else:
        self.motor_make = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_model = str[start:end].decode('utf-8')
      else:
        self.motor_model = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.max_current, _x.speed_constant, _x.motor_resistance, _x.motor_torque_constant, _x.encoder_reduction, _x.pulses_per_revolution,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
