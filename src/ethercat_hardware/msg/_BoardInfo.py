"""autogenerated by genpy from ethercat_hardware/BoardInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class BoardInfo(genpy.Message):
  _md5sum = "ffcb87ef2725c5fab7d0d8fcd4c7e7bc"
  _type = "ethercat_hardware/BoardInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string description
uint32 product_code
uint32 pcb
uint32 pca
uint32 serial
uint32 firmware_major
uint32 firmware_minor
float64 board_resistance
float64 max_pwm_ratio
float64 hw_max_current
bool poor_measured_motor_voltage
"""
  __slots__ = ['description','product_code','pcb','pca','serial','firmware_major','firmware_minor','board_resistance','max_pwm_ratio','hw_max_current','poor_measured_motor_voltage']
  _slot_types = ['string','uint32','uint32','uint32','uint32','uint32','uint32','float64','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       description,product_code,pcb,pca,serial,firmware_major,firmware_minor,board_resistance,max_pwm_ratio,hw_max_current,poor_measured_motor_voltage

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoardInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.description is None:
        self.description = ''
      if self.product_code is None:
        self.product_code = 0
      if self.pcb is None:
        self.pcb = 0
      if self.pca is None:
        self.pca = 0
      if self.serial is None:
        self.serial = 0
      if self.firmware_major is None:
        self.firmware_major = 0
      if self.firmware_minor is None:
        self.firmware_minor = 0
      if self.board_resistance is None:
        self.board_resistance = 0.
      if self.max_pwm_ratio is None:
        self.max_pwm_ratio = 0.
      if self.hw_max_current is None:
        self.hw_max_current = 0.
      if self.poor_measured_motor_voltage is None:
        self.poor_measured_motor_voltage = False
    else:
      self.description = ''
      self.product_code = 0
      self.pcb = 0
      self.pca = 0
      self.serial = 0
      self.firmware_major = 0
      self.firmware_minor = 0
      self.board_resistance = 0.
      self.max_pwm_ratio = 0.
      self.hw_max_current = 0.
      self.poor_measured_motor_voltage = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I3dB.pack(_x.product_code, _x.pcb, _x.pca, _x.serial, _x.firmware_major, _x.firmware_minor, _x.board_resistance, _x.max_pwm_ratio, _x.hw_max_current, _x.poor_measured_motor_voltage))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description = str[start:end].decode('utf-8')
      else:
        self.description = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.product_code, _x.pcb, _x.pca, _x.serial, _x.firmware_major, _x.firmware_minor, _x.board_resistance, _x.max_pwm_ratio, _x.hw_max_current, _x.poor_measured_motor_voltage,) = _struct_6I3dB.unpack(str[start:end])
      self.poor_measured_motor_voltage = bool(self.poor_measured_motor_voltage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.description
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6I3dB.pack(_x.product_code, _x.pcb, _x.pca, _x.serial, _x.firmware_major, _x.firmware_minor, _x.board_resistance, _x.max_pwm_ratio, _x.hw_max_current, _x.poor_measured_motor_voltage))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.description = str[start:end].decode('utf-8')
      else:
        self.description = str[start:end]
      _x = self
      start = end
      end += 49
      (_x.product_code, _x.pcb, _x.pca, _x.serial, _x.firmware_major, _x.firmware_minor, _x.board_resistance, _x.max_pwm_ratio, _x.hw_max_current, _x.poor_measured_motor_voltage,) = _struct_6I3dB.unpack(str[start:end])
      self.poor_measured_motor_voltage = bool(self.poor_measured_motor_voltage)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6I3dB = struct.Struct("<6I3dB")
